import React, { createContext, useContext, useState, useEffect } from 'react';

export interface CartItem {
Â  id: string;
Â  name: string;
Â  price: number;
Â  image: string;
Â  delivery: string;
Â  quantity: number;
Â  deliveryCharge?: number;
}

interface CartContextType {
Â  cart: CartItem[];
Â  addToCart: (item: Omit<CartItem, 'quantity'>) => void;
Â  removeFromCart: (id: string) => void;
Â  updateQuantity: (id: string, quantity: number) => void;
Â  clearCart: () => void;
Â  getTotalPrice: () => number;
Â  getTotalItems: () => number;
}

const CartContext = createContext<CartContextType | undefined>(undefined);

// Helper function to load cart data from local storage on startup
const getInitialCart = (): CartItem[] => {
    try {
        const storedCart = localStorage.getItem('ecomCart');
        if (storedCart) {
            return JSON.parse(storedCart) as CartItem[];
        }
    } catch (error) {
        console.error("Error loading cart from storage:", error);
    }
    // Return a default mock item for easy testing if storage is empty
    return [
        {
            id: "mock-prod-1",
            name: "Default Test Item",
            price: 1500,
            image: "ðŸ“¦",
            delivery: "2 days",
            quantity: 1,
            deliveryCharge: 59,
        }
    ];
};


export const CartProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
Â  // Initialize state from local storage
Â  const [cart, setCart] = useState<CartItem[]>(getInitialCart);
  
  // Effect to synchronize cart state with local storage whenever 'cart' changes
  useEffect(() => {
    try {
        localStorage.setItem('ecomCart', JSON.stringify(cart));
    } catch (error) {
        console.error("Error saving cart to storage:", error);
    }
  }, [cart]);


Â  const addToCart = (item: Omit<CartItem, 'quantity'>) => {
Â  Â  setCart((prevCart) => {
Â  Â  Â  const existingItem = prevCart.find((cartItem) => cartItem.id === item.id);
Â  Â  Â  
Â  Â  Â  if (existingItem) {
Â  Â  Â  Â  return prevCart.map((cartItem) =>
Â  Â  Â  Â  Â  cartItem.id === item.id
Â  Â  Â  Â  Â  Â  ? { ...cartItem, quantity: cartItem.quantity + 1 }
Â  Â  Â  Â  Â  Â  : cartItem
Â  Â  Â  Â  );
Â  Â  Â  }
Â  Â  Â  
Â  Â  Â  return [...prevCart, { ...item, quantity: 1 }];
Â  Â  });
Â  };

Â  const removeFromCart = (id: string) => {
Â  Â  setCart((prevCart) => prevCart.filter((item) => item.id !== id));
Â  };

Â  const updateQuantity = (id: string, quantity: number) => {
Â  Â  if (quantity <= 0) {
Â  Â  Â  removeFromCart(id);
Â  Â  Â  return;
Â  Â  }
Â  Â  
Â  Â  setCart((prevCart) =>
Â  Â  Â  prevCart.map((item) =>
Â  Â  Â  Â  item.id === id ? { ...item, quantity } : item
Â  Â  Â  )
Â  Â  );
Â  };

Â  const clearCart = () => {
Â  Â  setCart([]);
Â  };

Â  const getTotalPrice = () => {
Â  Â  return cart.reduce((total, item) => total + item.price * item.quantity, 0);
Â  };

Â  const getTotalItems = () => {
Â  Â  return cart.reduce((total, item) => total + item.quantity, 0);
Â  };

Â  return (
Â  Â  <CartContext.Provider
Â  Â  Â  value={{
Â  Â  Â  Â  cart,
Â  Â  Â  Â  addToCart,
Â  Â  Â  Â  removeFromCart,
Â  Â  Â  Â  updateQuantity,
Â  Â  Â  Â  clearCart,
Â  Â  Â  Â  getTotalPrice,
Â  Â  Â  Â  getTotalItems,
Â  Â  Â  }}
Â  Â  >
Â  Â  Â  {children}
Â  Â  </CartContext.Provider>
Â  );
};

export const useCart = () => {
Â  const context = useContext(CartContext);
Â  if (context === undefined) {
Â  Â  throw new Error('useCart must be used within a CartProvider');
Â  }
Â  return context;
};
